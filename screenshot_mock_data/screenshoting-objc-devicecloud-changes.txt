    NSURLSessionDataTask *task = [self.manager GET:@"/v1/devices" parameters:nil progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject)
    {

        NSError *error = nil;
        NSString *filepath = [[NSBundle mainBundle] pathForResource:@"mock_devices_for_store_listing_screenshots" ofType:@"json"];
        NSData* data = [NSData dataWithContentsOfFile:filepath];
        responseObject = [NSJSONSerialization JSONObjectWithData:data options:0 error:&error];




    NSURLSessionDataTask *task = [self.manager GET:urlPath parameters:nil progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject)
    {
        NSError *error = nil;
        NSString *filepath = [[NSBundle mainBundle] pathForResource:@"mock_devices_for_store_listing_screenshots" ofType:@"json"];
        NSData* data = [NSData dataWithContentsOfFile:filepath];
        responseObject = [NSJSONSerialization JSONObjectWithData:data options:0 error:&error][0];

        NSLog(@"responseObject = %@", responseObject);

        [ParticleLogger logInfo:NSStringFromClass([self class]) format:@"%@ (%i)", urlPath, (int)((NSHTTPURLResponse *)task.response).statusCode];
        [ParticleLogger logComplete:NSStringFromClass([self class]) format:@"%@", responseObject];
         if (completion)
         {
             NSMutableDictionary *responseDict = responseObject;
             ParticleDevice *device = [[ParticleDevice alloc] initWithParams:responseDict];
             
             if (device) { // new 0.5.0 local storage of devices for reporting system events
                 if (!self.devicesMapTable) {
                     self.devicesMapTable = [NSMapTable mapTableWithKeyOptions:NSMapTableStrongMemory valueOptions:NSMapTableObjectPointerPersonality]; // let the user decide when to release ParticleDevice objects
                 }
                 [self.devicesMapTable setObject:device forKey:device.id];
             }
             
             if (completion)
             {
                completion(device, nil);
             }
             
         }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error)
    {
        NSString *filepath = [[NSBundle mainBundle] pathForResource:@"mock_devices_for_store_listing_screenshots" ofType:@"json"];
        NSData* data = [NSData dataWithContentsOfFile:filepath];
        id responseObject = [NSJSONSerialization JSONObjectWithData:data options:0 error:&error][0];

        NSLog(@"responseObject = %@", responseObject);

        [ParticleLogger logInfo:NSStringFromClass([self class]) format:@"%@ (%i)", urlPath, (int)((NSHTTPURLResponse *)task.response).statusCode];
        [ParticleLogger logComplete:NSStringFromClass([self class]) format:@"%@", responseObject];
        if (completion)
        {
            NSMutableDictionary *responseDict = responseObject;
            ParticleDevice *device = [[ParticleDevice alloc] initWithParams:responseDict];

            if (device) { // new 0.5.0 local storage of devices for reporting system events
                if (!self.devicesMapTable) {
                    self.devicesMapTable = [NSMapTable mapTableWithKeyOptions:NSMapTableStrongMemory valueOptions:NSMapTableObjectPointerPersonality]; // let the user decide when to release ParticleDevice objects
                }
                [self.devicesMapTable setObject:device forKey:device.id];
            }

            if (completion)
            {
                completion(device, nil);
            }

        }
    }];